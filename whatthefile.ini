[whatthefile]
modules_package = src.modules
safe_output_path = ./tests/examples/safe_directory
output = elasticsearch
n_threads = 2

#output_date_format = epoch
#output_date_format = epoch_ms
output_date_format = %Y-%m-%dT%H:%M:%S.%f
#output = file

log_output = stdout
log_level : DEBUG
#log_output = file

[output.file]
path = ./output.txt

[output.elasticsearch]
scheme : https
host : 192.168.1.51
port : 9200
index : whatthefile-analysis
request_timeout : 60
ssl_certificate_path : ./tests/examples/cert.pem
check_hostname = false
verify_certs = false
user : admin
password : admin

[log_output.file]
filename : whatthefile-log



#The order is important, fist modules load and execute before the latests
# Modules can use output from previous modules as output
[module.hashes]
active = true
hashes_to_calculate = MD5,SHA1,SHA256

[module.ignore]
active = true
#file_hashes_md5_to_ignore = ./ignoredhashesmd5.txt
#file_hashes_sha1_to_ignore = ./ignoredhashessha1.txt
#file_extensions_to_ignore = ./ignoredextensions.txt
#file_ignore_path = ./ignoredpaths.txt
#ignore_greater_or_equal_than = 6000000000
#ignore_less_or_equal_than = 6

[module.windowsregistry]
active = true

[module.metadata]
active = true

[module.tikaparser]
active = true
tika_server_url = http://192.168.1.51:9998

[module.whisper]
active = true
#informaci√≥n de modelos en: https://github.com/openai/whisper
model_type = tiny
use_fp16 = false

[module.strings]
active = false
char_min = 6
ignore_extensions = .docx,.doc,.txt,.pdf,.sqlite

[module.pstostparser]
active = true
needs_pipe = true
#output = print
#output = file
#path = ./output-emails.txt
output = elasticsearch
scheme : ${output.elasticsearch:scheme}
host : ${output.elasticsearch:host}
port : ${output.elasticsearch:port}
index : whatthefile-emails
request_timeout : ${output.elasticsearch:request_timeout}
ssl_certificate_path: ${output.elasticsearch:ssl_certificate_path}
check_hostname = ${output.elasticsearch:check_hostname}
verify_certs = ${output.elasticsearch:verify_certs}
user: ${output.elasticsearch:user}
password: ${output.elasticsearch:password}

[module.certificatereader]
active = true

[module.imagerecognitiontensorflow]
active = true

[module.ocrtesseract]
active = true

[module.qrbcreader]
active = true

[module.zipextractor]
active = false
pwd_dict = ./tests/examples/wordlist.txt

[module.windowsprefetch]
active = true

[module.virustotal]
active = false
apikey = <PUT YOUR APKI KEY HERE>

[module.mftparser]
active = true
needs_pipe = true
#output = print
#output = file
#path = ./output-mft.txt
output = elasticsearch
scheme : ${output.elasticsearch:scheme}
host : ${output.elasticsearch:host}
port : ${output.elasticsearch:port}
index : whatthefile-mft
request_timeout : ${output.elasticsearch:request_timeout}
ssl_certificate_path: ${output.elasticsearch:ssl_certificate_path}
check_hostname = ${output.elasticsearch:check_hostname}
verify_certs = ${output.elasticsearch:verify_certs}
user: ${output.elasticsearch:user}
password: ${output.elasticsearch:password}

[module.evtxreader]
active = true
#filter_ids = 4624,4647,6005,1
filter_ids =
needs_pipe = true
#output = print
#output = file
#path = ./output-evtx.txt
output = elasticsearch
scheme : ${output.elasticsearch:scheme}
host : ${output.elasticsearch:host}
port : ${output.elasticsearch:port}
index : whatthefile-evtx
request_timeout : ${output.elasticsearch:request_timeout}
ssl_certificate_path: ${output.elasticsearch:ssl_certificate_path}
check_hostname = ${output.elasticsearch:check_hostname}
verify_certs = ${output.elasticsearch:verify_certs}
user: ${output.elasticsearch:user}
password: ${output.elasticsearch:password}

[module.browserhistory]
active = true
needs_pipe = true
output = elasticsearch
#output = file
#path = ./output-browser.txt
#output = elasticsearch
scheme : ${output.elasticsearch:scheme}
host : ${output.elasticsearch:host}
port : ${output.elasticsearch:port}
index : whatthefile-browser
request_timeout : ${output.elasticsearch:request_timeout}
ssl_certificate_path: ${output.elasticsearch:ssl_certificate_path}
check_hostname = ${output.elasticsearch:check_hostname}
verify_certs = ${output.elasticsearch:verify_certs}
user: ${output.elasticsearch:user}
password: ${output.elasticsearch:password}


[module.entropy]
active = false

[module.commentextractor]
active = true

[module.analysispysentimiento]
active = true
lang=es